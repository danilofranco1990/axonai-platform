# Nome do Workflow, que será exibido na aba "Actions" do GitHub.
name: Pull Request Validation

# --------------------------------------------------------------------------
# GATILHO (TRIGGER)
# --------------------------------------------------------------------------
# Define quando este workflow será executado.
on:
  # Executa para todo pull request que tem como alvo a branch 'main'.
  pull_request:
    branches: [ main, develop ]

# --------------------------------------------------------------------------
# JOBS
# --------------------------------------------------------------------------
# Define as tarefas a serem executadas. Jobs rodam em paralelo por padrão.
jobs:
  # --- Job para validar o código do Backend ---
  validate-backend:
    # O tipo de máquina virtual (runner) onde o job será executado.
    runs-on: ubuntu-latest

    steps:
      # Passo 1: Faz o checkout do código do repositório para o runner.
      - name: Checkout Repository
        uses: actions/checkout@v4

      # Passo 2: Configura o ambiente Java (JDK 21 da Temurin).
      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
          # Ativa o cache para as dependências do Maven, acelerando futuras execuções.
          cache: 'maven'

      # Passo 3: Executa o build completo e os testes com Maven.
      # O comando 'verify' executa todo o ciclo de vida até a fase de verificação,
      # o que inclui compilar, rodar testes unitários, de integração e de arquitetura.
      # A flag -B executa o Maven em modo "batch", ideal para CI.
      - name: Build and Test with Maven
        # Adicionamos 'working-directory' para que o comando seja executado
        # a partir da pasta /backend.
        working-directory: ./backend
        # O comando agora é mais simples, pois o Maven encontrará o pom.xml automaticamente.
        run: mvn -B verify

      - name: Upload Backend Coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          # O token que guardamos nos segredos do GitHub
          token: ${{ secrets.CODECOV_TOKEN }}
          # O ficheiro de relatório XML gerado pelo JaCoCo
          files: ./backend/target/site/jacoco/jacoco.xml
          # Uma flag para identificar este relatório como sendo do backend
          flags: backend  

  # --- Job para validar o código do Frontend ---
# --- Job para validar o código do Frontend ---
  validate-frontend:
    runs-on: ubuntu-latest
    
    # Define o diretório de trabalho padrão para TODOS os comandos 'run' neste job.
    defaults:
      run:
        working-directory: ./frontend

    steps:
      # Passo 1: Faz o checkout do código.
      - name: Checkout Repository
        uses: actions/checkout@v4

      # Passo 2: Configura o ambiente Node.js.
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          # O caminho para o cache deve ser relativo à raiz do repositório.
          cache-dependency-path: frontend/package-lock.json

      # Passo 3: Instala as dependências.
      - name: Install Dependencies
        run: npm ci

      # Passo 4: Executa o Linter e gera o relatório de cobertura.
      - name: Lint and Generate Coverage
        run: |
          npm run lint
          npm run coverage

      # Passo 5: Executa o Build do projeto.
      - name: Build Project
        run: npm run build

      # Passo 6: Envia o relatório de cobertura do Frontend para o Codecov.
      - name: Upload Frontend Coverage to Codecov
        uses: codecov/codecov-action@v4
        # A action do codecov precisa saber onde encontrar o ficheiro,
        # então o working-directory é útil aqui para simplificar o path.
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          # O caminho agora é relativo ao working-directory.
          files: ./tests/coverage/coverage-final.json
          flags: frontend