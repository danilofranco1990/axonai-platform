# Nome do Workflow, que será exibido na aba "Actions" do GitHub.
name: Pull Request Validation

# --------------------------------------------------------------------------
# GATILHO (TRIGGER)
# --------------------------------------------------------------------------
# Define quando este workflow será executado.
on:
  # Executa para todo pull request que tem como alvo a branch 'main'.
  pull_request:
    branches: [ main ]

# --------------------------------------------------------------------------
# JOBS
# --------------------------------------------------------------------------
# Define as tarefas a serem executadas. Jobs rodam em paralelo por padrão.
jobs:
  # --- Job para validar o código do Backend ---
  validate-backend:
    # O tipo de máquina virtual (runner) onde o job será executado.
    runs-on: ubuntu-latest

    steps:
      # Passo 1: Faz o checkout do código do repositório para o runner.
      - name: Checkout Repository
        uses: actions/checkout@v4

      # Passo 2: Configura o ambiente Java (JDK 21 da Temurin).
      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
          # Ativa o cache para as dependências do Maven, acelerando futuras execuções.
          cache: 'maven'

      # Passo 3: Executa o build completo e os testes com Maven.
      # O comando 'verify' executa todo o ciclo de vida até a fase de verificação,
      # o que inclui compilar, rodar testes unitários, de integração e de arquitetura.
      # A flag -B executa o Maven em modo "batch", ideal para CI.
      - name: Build and Test with Maven
        run: mvn -B verify --file backend/pom.xml

  # --- Job para validar o código do Frontend ---
  validate-frontend:
    runs-on: ubuntu-latest
    
    defaults:
      run:
        # Define o diretório de trabalho padrão para os comandos 'run'.
        working-directory: ./frontend

    steps:
      # Passo 1: Faz o checkout do código.
      - name: Checkout Repository
        uses: actions/checkout@v4

      # Passo 2: Configura o ambiente Node.js.
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          # Ativa o cache para as dependências do NPM.
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      # Passo 3: Instala as dependências de forma limpa e reproduzível.
      # 'npm ci' é a prática recomendada para CI, pois usa o package-lock.json.
      - name: Install Dependencies
        run: npm ci

      # Passo 4: Executa o Linter, os Testes e o Build do projeto frontend.
      - name: Lint, Test and Build
        run: |
          npm run lint
          npm run test
          npm run build